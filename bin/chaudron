#!/usr/bin/env bash

# -------------------------- VARIABLES --------------------------

COMMANDE=$1
COMMANDES=(fixtures help reset setup sql)
BLUEBG="\x1b[44m"
CYANBG="\x1b[46m"
REDBG="\x1b[41m"
RESET="\x1b[0m"
GREENBG="\x1b[42m"
WHITE="\x1b[97m"
YARN=yarn
YELLOWBG="\x1b[43m"

# -------------------------- VERIFICATIONS --------------------------

# If no arguments is given
if [ $# -le 0 ]; then
    echo -e "${REDBG}${WHITE}Erreur: Vous devez donner une commande à executer."
    exit 1
fi

#TODO ADD WHEN COMMAND DOESENT EXISTS

# If the user does not have PHP installed
if [ command -v php >/dev/null 2>&1 ]; then
    echo -e "${REDBG}${WHITE}Erreur: Vous devez avoir PHP pour lancer ce script."
    exit 1
fi

# If the user does not have Node.js installed
if [ command -v node >/dev/null 2>&1 ]; then
    echo -e "${REDBG}${WHITE}Erreur: Vous devez avoir node pour lancer ce script."
    exit 1
fi

if [ command -v yarn >/dev/null 2>&1 ]; then
    $YARN = .yarn/releases/yarn-1.22.4.js
fi

# -------------------------- FUNCTIONS --------------------------

function fixtures {
    php bin/console doctrine:fixtures:load
}

function help {
    echo -e "${BLUEBG}${WHITE}Chaudron - Version 1.0.0\n${RESET}"
    echo -e "${WHITE}Voici la liste des commandes disponibles: \n"
    echo -e "${WHITE}Que puis-je faire pour vous ${USER} ?\n"

    for C in ${COMMANDES[@]}; do
        case "$C" in
            "fixtures" )
                echo -e "${BLUEBG}${WHITE}fixtures${RESET} - Permet de générer les fixtures."
            ;;
            "help" )
                echo -e "${GREENBG}${WHITE}help${RESET} - Affiche la liste des commandes."
            ;;
            "reset" )
                echo -e "${REDBG}${WHITE}reset${RESET} - Permet de remettre la base de données à zéro."
            ;;
            "setup" )
                echo -e "${CYANBG}${WHITE}setup${RESET} - Permet de mettre en place le projet quand il vient d'être cloné."
            ;;
             "sql" )
                echo -e "${YELLOWBG}${WHITE}sql${RESET} - Permet de lancer des query SQL sur la base de données."
            ;;
        esac
    done
}

function reset {
    php bin/console doctrine:database:drop --force
    php bin/console doctrine:database:create
    rm -rf ./src/Migrations/*.php
    echo -e "\n${BLUEBG}${WHITE}Les migrations on été supprimées.${RESET}"
    php bin/console make:migration
    php bin/console doctrine:migrations:migrate
}

function setup {
    echo -e "${CYANBG}${WHITE}Voulez vous installer les dépendences de composer ? [y/n]${RESET}"
    read INS_COMPOSER

    if [ $INS_COMPOSER = "y" ] || [ $INS_COMPOSER = "yes" ]; then
        composer install
    else
        echo -e "${REDBG}${WHITE}Les dépendences de composer ne seront pas installées.${RESET}"
    fi

    echo -e "${CYANBG}${WHITE}Voulez vous installer les dépendences de Node.js ? [y/n]${RESET}"
    read INS_YARN

    if [ $INS_YARN = "y" ] || [ $INS_YARN = "yes" ]; then
        $YARN install
    else 
        echo -e "${REDBG}${WHITE}Les dépendences de Node.js ne seront pas installées.${RESET}"
    fi

    echo -e "${CYANBG}${WHITE}Voulez vous modifier DATABASE_URL dans le fichier .env ? [y/n]${RESET}"
    read MOD_ENV
    
    if [ $MOD_ENV = "y" ] || [ $MOD_ENV = "yes" ]; then
        echo -e "${CYANBG}${WHITE}Username de la BDD:${RESET}"
        read DATABASE_USER

        echo -e "${CYANBG}${WHITE}Password de la BDD:${RESET}"
        read DATABASE_PASSWORD

        echo -e "${CYANBG}${WHITE}Port de la BDD:${RESET}"
        read DATABASE_PORT

        sed -i "s|^DATABASE_URL=.*|DATABASE_URL=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost:${DATABASE_PORT}/ct404_diagonalley?serverVersion=5.7|" .env

        echo -e "${GREENBG}${WHITE}DATABASE_URL a été modifié avec succès.${RESET}"
    else 
        echo -e "${REDBG}${WHITE}DATABASE_URL n'a pas été modifié.${RESET}"
    fi
}

function sql {
    echo -e "${CYANBG}${WHITE}Entrez la query SQL que vous voulez executer.${RESET}"
    read QUERY
    php bin/console doctrine:query:sql "$QUERY"
}

function error_handler {
    $1

    if [[ $? = 0 ]]; then
        echo -e "${GREENBG}${WHITE}Succès: Tout s'est bien passé"
        exit 0
    else
        echo -e "${REDBG}${WHITE}Erreur: Il y a un problème avec la commande ${1}"
        exit 1
    fi
}

# -------------------------- LOGIC --------------------------

case "$COMMANDE" in
    "fixtures") error_handler fixtures;;
    "help" ) help;;
    "reset" ) error_handler reset;;
    "setup" ) error_handler setup;;
    "sql" ) error_handler sql;
esac

